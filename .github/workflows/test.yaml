name: Tests

on:
  push:
    branches:
      - main
    paths:
      - back/**
      - .github/**
  pull_request:
    types: [ opened, synchronize, reopened, ready_for_review ]
    paths:
      - back/**
      - .github/**

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  test-back:
    name: 'Test back'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    defaults:
      run:
        shell: bash
        working-directory: ./back
    # Do not run on WIP or Draft PRs
    if: "!github.event.pull_request || (!contains(github.event.pull_request.labels.*.name, 'WIP') && github.event.pull_request.draft == false)"
    steps:

      - name: 'Checkout'
        uses: actions/checkout@v3

      - name: 'Set up PHP'
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer:v2, symfony

      - name: 'Get Composer Cache Directory'
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: 'Restore cached dependencies'
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: 'Install dependencies & setup project'
        run: |
          make install.composer@integration
          make install.composer.tools@integration

      - name: 'Generate SSL Key for JWT'
        run: php bin/console lexik:jwt:generate-keypair

      - name: 'docker composer run postgresql'
        run: |
          docker compose --profile=local up -d --wait

      - name: 'Create Database'
        run: symfony console doctrine:database:create --if-not-exists
        env:
          APP_ENV: test

      - name: 'Update database schema'
        run: symfony console doctrine:schema:update --force --complete
        env:
          APP_ENV: test

      - name: 'Run tests'
        run: symfony php bin/phpunit --colors=always --testdox
        env:
          APP_ENV: test
